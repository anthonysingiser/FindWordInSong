{"version":3,"sources":["FindWordInLyrics.js","FetchLyrics.js","GenerateAPICallFromSearchTerms.js","SearchTerms.js","App.js","reportWebVitals.js","index.js"],"names":["FindWordInLyrics","props","numberOfOccurences","filteredLyrics","rawLyrics","replace","split","filter","letter","indexOf","console","log","join","RemovePunctuation","word","soughtWord","length","toUpperCase","FetchLyrics","apiCall","useState","lyrics","setLyrics","useEffect","fetch","then","response","json","data","catch","toLowerCase","GenerateAPICallFromSearchTerms","processStringWithSpaces","wordsWithSpaces","words","map","at","artist","inputs","song","apiCallWithInputData","SearchTerms","setInputs","submitInputs","setSubmitInputs","handleChange","event","name","target","value","values","onSubmit","preventDefault","type","onChange","App","className","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af38a483.chunk.js","sourcesContent":["//filters out punctuation, \n//and then counts how many times the 'soughtWord' occurs in the song\n//filter out '\\r' and '\\n' as well\n//account for lyrics with 'paroles de la chanson {song} par {artist} \n\n\nexport default function FindWordInLyrics(props){\n  \n  function replaceNewLineWithSpace(characters){\n      return characters.replace(/\\n/g,' ')\n  }\n  \n  function RemovePunctuation() {\n    const punctuation = '!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~\\r'\n    const lyricsNoNewLines = replaceNewLineWithSpace(props.rawLyrics)\n    const splitLyrics = lyricsNoNewLines.split('')\n    const filteredLyrics = splitLyrics.filter((letter) => {\n        return punctuation.indexOf(letter) === -1\n        })\n      console.log(filteredLyrics)\n      return filteredLyrics.join('')\n    }\n\n  function main(){\n    const lyricsWithNoPunctuation = RemovePunctuation()\n    const splitLyrics = lyricsWithNoPunctuation.split(' ')\n    const returnArray = splitLyrics.filter((word) =>{\n      return word === props.soughtWord\n    })\n    return returnArray.length\n  }\n\n  const numberOfOccurences = main();\n\n  return( \n    <>\n    <br></br>\n    <br></br>\n    The word \"{props.soughtWord.toUpperCase()}\" appears {numberOfOccurences} times in this song. \n    </>\n  )\n}","//calls lyric data from lyric API and then returns them.\n\nimport { useEffect, useState } from 'react';\nimport FindWordInLyrics from './FindWordInLyrics';\n\nexport default function FetchLyrics(props) {\n    console.log(\"hello from FetchLyrics\")\n    console.log(props.apiCall)\n\n    const [lyrics, setLyrics] = useState('');\n      useEffect(() => {\n          fetch(props.apiCall)\n            .then((response) => response.json())\n            .then((data) => setLyrics(data.lyrics))\n            .catch((console.log('lyrics bad')))\n        })\n\n    return (\n        <div>\n            <br></br>\n            {lyrics}\n                <FindWordInLyrics\n                    rawLyrics = {lyrics.toLowerCase()}\n                    soughtWord = {props.soughtWord.toLowerCase()}\n                />\n        </div>\n    )        \n}","import FetchLyrics from \"./FetchLyrics\";\n\nexport default function GenerateAPICallFromSearchTerms(props){\n    \n    function processStringWithSpaces(wordsWithSpaces) {\n        const words = wordsWithSpaces.split(' ')\n        const stringWithPercent = words.map((word) => {\n            if (word === words.at(-1)) {\n                return word\n            } else {\n                return `${word}%20`\n            }\n        }).join('')\n        return stringWithPercent\n    }\n\n    const artist = processStringWithSpaces(props.inputs.artist)\n    const song = processStringWithSpaces(props.inputs.song)\n\n    const apiCallWithInputData = `https://api.lyrics.ovh/v1/${artist}/${song}`\n    \n    return (\n        <div>\n            <FetchLyrics \n                apiCall = {apiCallWithInputData}\n                song = {props.song}\n                artist = {props.artist}\n                soughtWord = {props.inputs.soughtWord}\n            />\n        </div> \n    )\n}","import { useState } from \"react\";\nimport GenerateAPICallFromSearchTerms from \"./GenerateAPICallFromSearchTerms\";\n\nexport default function SearchTerms() {\n  const [inputs, setInputs] = useState({});\n  const [submitInputs, setSubmitInputs] = useState({artist: ''})\n\n  const handleChange = (event) => {\n    const name = event.target.name;\n    const value = event.target.value;\n    setInputs(values => ({...values, [name]: value}))\n  }\n  \n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setSubmitInputs(inputs)\n  }\n\n  const renderGenerateAPI = () => {\n      if(submitInputs === inputs){\n        return <GenerateAPICallFromSearchTerms inputs = {submitInputs}/>\n      } else{\n        return\n      }\n    }\n\n  return (\n    <div>\n    <form onSubmit= {handleSubmit}>\n      <label>Artist:\n      <input \n        type=\"text\" \n        name=\"artist\" \n        value={inputs.artist || \"\"} \n        onChange={handleChange}\n      />\n      </label>\n      <label>Song:\n      <input \n        type=\"text\" \n        name=\"song\" \n        value={inputs.song || \"\"} \n        onChange={handleChange}\n      />\n      </label>\n      <label> Word:\n      <input\n        type='text'\n        name='soughtWord'\n        value={inputs.soughtWord || \"\"}\n        onChange={handleChange}\n      />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n    {console.log(submitInputs)}\n    {console.log(inputs)}\n      {renderGenerateAPI()}\n    </div>\n  )\n}","/*\n1) objects are only for data (no methods, no storing variables)\n2) The code must execute from 1 \"top level\" function called website()\n3) You may not use the returns of any functions (or all functions must return null. whichever you please) \nstructure in functions:\n\nfunction Website (){\n  callAPI();\n}\n\nobject SearchTerms = {\n  musicObject{\n    artist: 'The Beatles',\n    song: 'Hey Jude',\n  }\n}\n\nfunction callAPI(){\n  let lyrics = \"\";\n  lyrics = getAPI.data.lyrics\n  findWordInLyrics(lyrics, 'jude')\n}\n\nfunction findWordInLyrics(lyrics, soughtWord){\n    lyrics.filter((word) =>{\n      word === soughtWord\n    }\n    ).length\n} \n\nWebsite();\n*/\n\nimport './App.css';\nimport SearchTerms from './SearchTerms';\nimport React from 'react';\n\nclass App extends React.Component {\n  render() {\n    return(\n      <div className=\"App\">\n        <SearchTerms />\n      \n      </div>\n    )\n  };\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    < App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}